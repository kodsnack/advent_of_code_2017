##############################################################################
###                                                                        ###
###                                                                        ###
###                        Day one part two:                               ###
###                            match digit with                            ###
###                            halfway digit length/2                      ###
###                                                                        ###
###                            No delayed branching pls                    ###
###                                                                        ###
##############################################################################

    .globl main

### Text segment
    .text

main:
        la		$a0, test_data_1
        jal		find_sum				# jump to find_sum
        move            $s0, $t1                                # store result
        
        la		$a0, test_data_2
        jal		find_sum				# jump to find_sum
        move            $s1, $t1                                # store result
        
        la		$a0, test_data_3    
        jal		find_sum				# jump to find_sum
        move            $s2, $t1                                # store result
        
        la		$a0, test_data_4    
        jal		find_sum				# jump to find_sum
        move            $s3, $t1                                # store result

        la		$a0, test_data_5    
        jal		find_sum				# jump to find_sum
        move            $s4, $t1                                # store result        
        
        la		$a0, actual_data        
        jal		find_sum				# jump to find_sum
        move            $s4, $t1                                # store result
	
	j               exit

find_sum:
        li              $t4, 0					# i = 0 
        li		$t1, 0         				# $t1 = sum = 0
	move		$t9, $ra       				# store return adress for when we're done
	move		$a1, $a0				# move start to $a1 since we need $a0 for later (it's very late okay)
        jal       	strlen      				# $t0 = length of string
        move		$a1, $a0				# store start of data in $a1
        
	divu		$t8, $t0, 2				# $t8 = halfway
	add 		$a3, $a0, $t8				# $a3 = address to halfway
	
	addi		$a2, $t0, -1
	add		$a2, $a2, $a0 				# store end of data in $a2
        							# used for wrap around in find_sum_loop
find_sum_loop:
	bgt		$a3, $a2, wrap_around
	
        lb              $t7, 0($a0)
        andi            $t7, $t7, 0x0F				# mask char to get int value
        addi		$a0, $a0, 1
        lb              $t6, 0($a3)
        andi            $t6, $t6, 0x0F
        addi            $a3, $a3, 1    				# increment pointer str[i]
        
        beq             $t7, $t6, if_captca_digit_equals_next
        j               find_sum_loop_last
        
wrap_around:
	move		$a3, $a1
	j		find_sum_loop

if_captca_digit_equals_next:
        add             $t1, $t1, $t7				# sum += str[i]
        
find_sum_loop_last:
        addi            $t4, $t4, 1				# i++
        bne             $t4, $t0, find_sum_loop			# i < $t0 (length of string)
        jr              $t9					# jump back to main                  

strlen:
        li     $t0, 0						# initialize the count to zero
        
strlen_loop:
	lb     $t1, 0($a1)					# load the next character into t1
        beqz   $t1, strlen_exit					# t1 == null?
        addi   $a1, $a1, 1					# increment pointer
        addi   $t0, $t0, 1					# increment the count
        j      strlen_loop					# return to the top of the loop
        
strlen_exit:
	jr $ra

exit: 
    nop								# program has finished executing

.data
test_data_1: # should give 6
        .asciiz "1212"
test_data_2: # should give 0
        .asciiz "1221"
test_data_3: # should give 4
        .asciiz "123425"
test_data_4: # should give 12
        .asciiz "123123"
test_data_5: # should give 4
        .asciiz "12131415"
actual_data:
        .asciiz